[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cync_controller"
version = "0.0.4.13"
description = "A Python library for local async MQTT control of Cync/C by GE smart devices"
readme = "README.md"
authors = [{name = "jslamartina", email = "6307064+jslamartina@users.noreply.github.com"}]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Operating System :: OS Independent",
    "License :: OSI Approved :: MIT License",
]
requires-python = ">=3.13"
dependencies = [
    "pyyaml==6.0.2",
    "uvloop>=0.21.0",
    "aiomqtt==2.3.0",
    "aiohttp>=3.10.8",
    "fastapi>=0.115.12",
    "uvicorn>=0.34.3",
    "tzlocal>=5.3.1",
]
[project.optional-dependencies]
dev = [
    "python-dotenv>=1.1.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-playwright>=0.4.0",
    "pytest-xdist>=3.0.0",
]

[project.scripts]
cync-controller = "cync_controller.main:main"

[project.urls]
Homepage = "https://github.com/jslamartina/hass-addons"
Repository = "https://github.com/jslamartina/hass-addons"
Issues = "https://github.com/jslamartina/hass-addons/issues"

[tool.ruff]
# Enable project-wide linting
target-version = "py313"
line-length = 120
src = ["src"]
extend-exclude = ["__pycache__"]
force-exclude = true
respect-gitignore = true

[tool.ruff.lint]
# Select rules to check (more comprehensive)
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "N",     # pep8-naming
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez (timezone aware datetimes)
    "T10",   # flake8-debugger (no debugger statements)
    "EM",    # flake8-errmsg (error message best practices)
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "PIE",   # flake8-pie (misc lints)
    "T20",   # flake8-print (no print statements)
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "TID",   # flake8-tidy-imports
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "PL",    # pylint rules
    "TRY",   # tryceratops (exception handling)
    "RUF",   # ruff-specific rules
]
ignore = [
    "E501",    # line too long (handled by formatter)
    "F405",    # star imports may be undefined
    "F403",    # star import used; unable to detect undefined names
    "T20",     # print statements (used for CLI output)
    "TRY003",  # avoid specifying long messages outside exception class
    "PLR0913", # too many arguments
    "PLR2004", # magic value comparison
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py files

# Tests: allow localized imports and test-specific patterns
"tests/**/*.py" = ["PLC0415", "EM101", "TRY301", "TRY002", "SIM222", "PT018", "PT006", "SIM117", "PLW2901", "PLR1714", "RET504", "PT015", "B011", "RSE102"]

[tool.ruff.format]
# Ruff formatter (Black-compatible)
quote-style = "double"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = 88

[tool.pytest.ini_options]
markers = [
    "unit: Unit tests (fast, isolated)",
    "integration: Integration tests (slower, requires services)",
    "e2e: End-to-end tests (slowest, full workflow)",
    "slow: Tests that take a long time to run",
    "skip: Skip this test",
    "serial: Tests that must run serially (restarts addon, changes config)",
]