---
alwaysApply: true
description: How to properly use create_plan and todo_write tools
---

# Plan and Todo Management

## Core Principle

**One plan per session** - Update the same plan file; don't create new ones.

## Tools

### create_plan

**Purpose:** Manages the plan file (.plan.md) for current session.

**CRITICAL: NEVER edit plan files directly with search_replace, write, or any other file tool. ALWAYS use create_plan.**

**CRITICAL: DO NOT ADD CHECKBOXES via MARKDOWN. Todos are handled by the Cursor todos system!**

**NOTE: The "### To-dos" section with markdown checkboxes is auto-generated from the structured `todos` array you pass to `create_plan`. You cannot use `old_str`/`new_str` to edit it. To update what checkboxes appear:**
1. Pass the updated `todos` array to `create_plan` with `plan=""`
2. The markdown checkbox display will regenerate automatically
3. The display may not update immediately - check the workspace todos to verify

**First call:**
```python
create_plan(
    name="Short Name",    # Only on FIRST call
    overview="1-2 sentence summary",
    plan="# Title\n\nContent...",
    todos=[{"id": "task-1", "content": "Task", "status": "pending"}]
)
```

**Updating:**
- Full replacement: Provide new `plan` string
- Partial edit: Use `old_str`/`new_str` for specific sections
- Only todos: **MUST pass `plan=""`** (required, not optional), provide `todos` array

**WRONG:**
```python
# ❌ NEVER DO THIS
search_replace("/path/to/file.plan.md", old_str="...", new_str="...")
write("/path/to/file.plan.md", contents="...")
```

**CORRECT:**
```python
# ✅ ALWAYS DO THIS
create_plan(old_str="...", new_str="...", plan="")
create_plan(todos=[...])
```

### todo_write

**Purpose:** Manages workspace task tracking (separate from plan todos).

**Usage:**
```python
# Update specific todos
todo_write(merge=True, todos=[{"id": "x", "content": "...", "status": "completed"}])

# Replace all todos
todo_write(merge=False, todos=[...only keep these...])
```

## Workflow

**Adding a phase:** Say "update the plan to add Phase 2" not "create a new plan"

```python
create_plan(old_str="## Phase 1\n...", new_str="## Phase 1\n...\n\n## Phase 2\n...", todos=[...keep existing + add new...])
```

**Syncing todos:** Plan and workspace todos are **separate systems** that sync by matching IDs.

**Workflow**:
1. Update workspace todos with `todo_write` (includes `status`) DURING work AS IT'S BEING DONE.
2. Refresh plan todos from workspace todos with `create_plan` (NO `status` field) AFTER work is completed. You can't do this step in Plan Mode.
3. Plan syncs status from workspace based on matching IDs

```python
# Step 1: Update workspace todos (with status)
todo_write(merge=True, todos=[
    {"id": "task-1", "content": "...", "status": "completed"}
])

# Step 2: Refresh plan todos (NO status - it syncs from workspace)
create_plan(plan="", todos=[
    {"id": "task-1", "content": "..."},  # Status synced from workspace
    {"id": "task-2", "content": "..."},
    # Must pass FULL list every time
])
```

**Critical**:
- `create_plan` only accepts `id` and `content` (NOT `status`)
- Must pass complete todo list to `create_plan` each time (not just changed items)
- Status syncs from workspace → plan when you call `create_plan`

**After task completion:** Update both with completed status.

## Rules

- One plan per session (update, don't create new)
- Use `old_str`/`new_str` for partial edits; full `plan` for restructuring
- `todo_write(merge=False)` replaces all todos (use to delete)
- Keep plan and workspace todos synchronized
