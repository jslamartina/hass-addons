---
description: Automated Long-Lived Access Token (LLAT) creation flow
---

# Token Creation Flow

Automated token creation using WebSocket API with existing token bootstrap. **No manual intervention required.**

## Three-Phase Flow

### Phase 1: Onboarding Token (Fresh HA Setup)
```bash
create_first_user() {
  local auth_token=$(curl -X POST "$HA_URL/api/onboarding/users" \
    -H "Content-Type: application/json" \
    -d '{"username": "dev", "password": "dev", "name": "Developer", "language": "en"}' | jq -r '.auth_token')
  echo "$auth_token"
}
ONBOARDING_TOKEN="$(create_first_user)"
echo "ONBOARDING_TOKEN=$ONBOARDING_TOKEN" >> hass-credentials.env
```

### Phase 2: Bootstrap LLAT Creation
```bash
get_ha_auth_token() {
  if [ -n "$ONBOARDING_TOKEN" ]; then
    local new_token=$(EXISTING_TOKEN="$ONBOARDING_TOKEN" \
      node scripts/create-token-from-existing.js)
    echo "LONG_LIVED_ACCESS_TOKEN=$new_token" >> hass-credentials.env
    HA_AUTH_TOKEN="$new_token"
    return 0
  fi

  if [ -n "$LONG_LIVED_ACCESS_TOKEN" ]; then
    HA_AUTH_TOKEN="$LONG_LIVED_ACCESS_TOKEN"
    return 0
  fi

  echo "❌ No valid token found"
  return 1
}
```

### Phase 3: Persist LLAT
```bash
# Token automatically saved to hass-credentials.env
# Use for all subsequent API calls
HA_AUTH_TOKEN="$LONG_LIVED_ACCESS_TOKEN"
```

## WebSocket Token Creation (Node.js)

```javascript
// scripts/create-token-from-existing.js
// 1. Validate existing token via REST API
// 2. Connect to WebSocket API
// 3. Authenticate with existing token
// 4. Request long-lived token (3650 days lifespan)
// 5. Extract and output LLAT
```

## Error Handling

**Missing Environment Variable:** Ensure `EXISTING_TOKEN` or `ONBOARDING_TOKEN` is set

**Invalid Token (HTTP 401):** Token expired or incorrect - run fresh onboarding

**WebSocket Failure:** Check HA logs, ensure API accessible

## Usage

```bash
# Automatic (recommended)
./scripts/setup-fresh-ha.sh

# Direct token creation
EXISTING_TOKEN="$ONBOARDING_TOKEN" node scripts/create-token-from-existing.js
```

## Key Rules

**Never:**
- ❌ Hardcode tokens in scripts or code
- ❌ Commit tokens to version control
- ❌ Create redundant LLATs

**Always:**
- ✅ Pass tokens via environment variables
- ✅ Save LLAT to `hass-credentials.env` immediately
- ✅ Use LLAT for all subsequent API calls
