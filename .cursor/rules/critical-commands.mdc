---
description: Critical command handling rules
---

# Critical Command Handling

**Never skip callback registration or ACK handling** - otherwise devices ignore commands.

## Rule: Always Register Callbacks

Commands that send TCP packets must register callbacks to receive responses:

- Commands send but devices don't respond without proper callback registration
- Missing callbacks cause silent failures - no errors, but no action
- All command methods must include callback registration logic

## Rule: Proper ACK Handling

- Wait for ACK before considering command complete
- Don't assume immediate success
- Handle timeout cases appropriately

## Pattern

```python
# ✅ CORRECT: Register callback before sending
device.register_command_callback(command_id, callback)
await device.send_command(packet)
# ACK received → callback fires → state update

# ❌ WRONG: Send without callback
await device.send_command(packet)  # Device ignores this
```

## Timeout and Retry

```python
import asyncio
import random

async def send_with_retry(device, packet, max_retries=3, base_delay=0.5):
    """Send command with exponential backoff + jitter."""
    for attempt in range(max_retries):
        try:
            result = await asyncio.wait_for(
                device.send_command(packet),
                timeout=5.0  # 5s timeout
            )
            return result
        except asyncio.TimeoutError:
            if attempt == max_retries - 1:
                raise
            # Exponential backoff with jitter
            delay = base_delay * (2 ** attempt) + random.uniform(0, 0.1)
            await asyncio.sleep(delay)
```

## Idempotency

- Commands should be safe to retry (same result if sent multiple times)
- Use unique command IDs to detect duplicates
- Don't assume device state changed without ACK

## Correlation and Logging

```python
from cync_controller.correlation import ensure_correlation_id

async def send_command(device_id, command):
    correlation_id = ensure_correlation_id()
    logger.info("→ Sending command", extra={
        "correlation_id": correlation_id,
        "device_id": device_id,
        "command": command,
    })

    # ... send ...

    logger.info("✓ ACK received", extra={
        "correlation_id": correlation_id,
        "device_id": device_id,
    })
```

See `docs/developer/architecture.md` for command flow details.
