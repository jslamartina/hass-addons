---
description: Critical logging requirements for all code changes
appliesTo:
  - "**/*.py"
---

# CRITICAL: LOGGING IS MANDATORY

Always add comprehensive, structured logging to code changes. Proper logging is critical for debugging.

## Setup

```python
from cync_controller.logging_abstraction import get_logger
from cync_controller.correlation import ensure_correlation_id
from cync_controller.instrumentation import timed_async

logger = get_logger(__name__)
```

## When to Log

**Always Log:**
- Function entry/exit (especially async)
- State changes (with before/after values)
- External operations (File I/O, network)
- Error paths (all exception handlers)
- Configuration loading
- User actions

**Don't Log:**
- Sensitive data (tokens, passwords)
- Excessive loop iterations (log summary instead)
- Already-logged information
- Redundant "Entering function" without context

## Log Format

```python
# Simple messages
logger.info("→ Starting operation")
logger.info("✓ Operation completed")
logger.error("✗ Operation failed")

# Structured context
logger.info("Device state changed", extra={
    "device_id": device_id,
    "old_state": "OFF",
    "new_state": "ON",
})

# Performance timing
@timed_async("mqtt_publish")
async def publish_message(topic, payload):
    await client.publish(topic, payload)
```

## Log Levels

- **DEBUG**: Detailed diagnostics (packet contents, internal state)
- **INFO**: Important events (connections, state changes)
- **WARNING**: Unexpected situations (recovered, retries)
- **ERROR**: Failures affecting functionality
- **CRITICAL**: System-wide failures

## Checklist

- [ ] Used `get_logger(__name__)`
- [ ] Added `ensure_correlation_id()` in async entry points
- [ ] Function entry/exit logged
- [ ] Error cases logged with structured context
- [ ] State changes logged with before/after values
- [ ] Used visual prefixes: `→`, `✓`, `✗`, `⚠️`

## Related

- See `docs/developer/logging-system.md` for implementation details
