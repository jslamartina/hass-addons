---
alwaysApply: true
description: Browser testing with Playwright patterns and workarounds
---

# Browser Testing with Playwright

**When to use:** Manual UI verification or when API tools are insufficient.

## Critical Patterns

### 1. Shadow DOM - Use Role-Based Selectors
```typescript
// ❌ WRONG: querySelector can't find inputs in shadow roots
const input = page.locator("ha-data-table input");

// ✅ CORRECT: Role-based selector pierces shadow DOM
const searchInput = page.getByRole("textbox", { name: /^Search/i });
await searchInput.fill("Hallway");
```

### 2. SVG Click Interception - Click Parent Containers
```typescript
// ❌ WRONG: Click button directly (fails with SVG)
await page.getByRole("button", { name: "Toggle" }).click();

// ✅ CORRECT: Click the entity card container
await page.locator("div").filter({ hasText: "Hallway Lights" }).nth(5).click();
```

### 3. Iframe Access - Use frameLocator
```typescript
const frame = page.frameLocator("iframe");
await frame.getByRole("link", { name: /Configuration/i }).click();
```

### 4. MQTT Entity Deletion - Stop Integration First
```typescript
// 1. Stop add-on
await stopAddon("local_cync-controller");

// 2. Wait for entities unavailable
await page.waitForTimeout(30000);

// 3. NOW delete entities
await page.getByText("Delete selected").click();
```

## Common Selectors

```typescript
// Login
await page.getByRole("textbox", { name: "Username*" }).fill("dev");
await page.getByRole("textbox", { name: "Password*" }).fill("dev");
await page.getByRole("button", { name: "Log in" }).click();

// Sliders (safe - no SVG interference)
await page.getByRole("slider", { name: "Brightness" }).click();

// Switches
await page.getByRole("switch", { name: /Debug/i }).click();

// Close dialog
await page.getByLabel("Close").click();
// Or: await page.keyboard.press("Escape");

// Navigate
await page.getByRole("link", { name: "Settings" }).click();
await page.getByRole("link", { name: "Devices & services" }).click();
```

## Anti-Patterns

```typescript
// ❌ DON'T: Force clicks (bypasses safety checks)
await page.getByRole("button").click({ force: true });

// ❌ DON'T: CSS selectors for shadow DOM content
const input = page.locator("ha-data-table input");

// ❌ DON'T: Click SVG elements directly
await page.locator("svg").click();

// ✅ DO: Click parent containers, use role-based selectors, click interactive elements
```

## Credentials

- File: `/workspaces/hass-addons/hass-credentials.env`
- Username: `dev`
- Password: `dev`

## When NOT to Use

- ❌ Configuration changes (use `scripts/configure-addon.sh`)
- ❌ Bulk operations (use API or Python scripts)
- ❌ Simple status checks (use `ha` CLI commands)
- ❌ Log inspection (use `ha addons logs`)

**Rule:** Prefer API tools over browser automation whenever possible.
