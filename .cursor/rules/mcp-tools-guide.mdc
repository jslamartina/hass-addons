---
description: MCP development tools usage and reference
---
!!CRITICAL RULE: Python MCP is available General Purpose Programming with full filesystem access!!

# MCP Tool Basics

Devcontainer exposes MCP servers for specialized tasks (see `.cursor/mcp.json`):

1. **python**: Native Python 3.13 with full filesystem access
2. **web_fetch**: Pull external docs/web pages (markdown or raw HTML)
3. **sequential-thinking**: Log multi-step reasoning, next actions, tool picks

## CRITICAL RULE: Python MCP - General Purpose Programming

**You have a full Python environment for arbitrary data processing.** Use it for:

- ✅ **Data processing & transformations** - Parse, analyze, transform without loading into context
- ✅ **Calculations & algorithms** - Quick math, logic, prototyping
- ✅ **File operations** - Bulk read/write, validation, migrations
- ✅ **JSON/YAML/CSV parsing** - Complex data structure manipulation
- ✅ **Code generation** - Template processing, code transforms
- ✅ **Validation & testing** - Test snippets before committing

**Features:**
- Native CPython 3.13 (not sandboxed)
- Full filesystem access: `/workspaces/hass-addons` working directory
- Standard library: `json`, `re`, `pathlib`, `datetime`, `asyncio`, etc.
- Package installs: `mcp_python_install_package` (temporary per execution)

**When to prefer over standard tools:**
- Multi-file operations or complex transformations
- Data analysis requiring computation
- Processing files too large to tokenize
- Need Python-specific logic (regex, json, etc.)

**Example: Data Processing**
```python
mcp_python_run_python_code("""
from pathlib import Path
import json

# Process multiple files
for file in Path('cync-controller/src').rglob('*.py'):
    if 'TODO' in file.read_text():
        print(f'{file}: contains TODOs')
""")
```

**Example: Complex Calculation**
```python
mcp_python_run_python_code("""
import statistics
data = [1, 2, 3, 4, 5, 10, 100]
print(f'Median: {statistics.median(data)}')
print(f'Stdev: {statistics.stdev(data):.2f}')
""")
```

## Fallback Strategy

If MCP fails, use standard tools (`read_file`, `grep`, terminal) and note the issue. See `docs/developer/mcp-tools.md` for details.
