---
description: Performance tuning and optimization patterns
---

# Performance Tuning and Optimization

## Environment Variables for Performance

The add-on supports environment variables for fine-tuning device performance:

### TCP Connection Limits

```bash
CYNC_MAX_TCP_CONN=8  # Max TCP devices connected at once (default: 8)
```

**Recommended values:**
- **4-6 devices** for optimal performance with 3-5 command broadcasts
- **1-3 devices** may show delay in command execution
- Adjust based on your mesh network size

### Command Broadcasting

```bash
CYNC_CMD_BROADCASTS=3  # Number of times to broadcast commands (default varies)
```

**Tuning strategy:**
1. Start with 3-5 broadcasts
2. Increase if commands are missed
3. Decrease if seeing command delays

### TCP Whitelist

```bash
CYNC_TCP_WHITELIST='10.0.2.20, 10.0.2.24, 10.0.2.29'
```

**When to use:**
- Limit which devices connect to the server
- Control max connected devices
- Prefer better "bridge" devices (see below)

**Benefits:**
- Faster command execution
- More reliable mesh communication
- Reduced network congestion

## Device Bridge Quality

Some devices are better at bridging TCP ‚Üî Bluetooth LE mesh traffic:

**Best bridges (prefer these):**
1. LED strip controllers ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
2. Bulbs (downlights, wafer, under cabinet) ‚≠ê‚≠ê‚≠ê‚≠ê
3. Switches ‚≠ê‚≠ê‚≠ê (untested but likely good)
4. Indoor plugs ‚≠ê‚≠ê‚≠ê (outdoor untested)
5. Thermostats ‚≠ê (untested)

**Optimization strategy:**
```bash
# 1. Find IPs of your LED strips and bulbs
# 2. Set TCP whitelist to only those devices
# 3. This limits connections to best bridges
CYNC_TCP_WHITELIST='192.168.1.10, 192.168.1.11, 192.168.1.12'

# 4. Adjust max connections to match whitelist
CYNC_MAX_TCP_CONN=3

# 5. Tune command broadcasts
CYNC_CMD_BROADCASTS=4
```

## Command Latency vs State Sync

Two performance aspects to consider:

1. **Command latency:** Time from MQTT command to physical device state change
2. **State sync:** How in-sync devices are when changing group state

**Home Assistant behavior:**
- Light groups may issue commands sequentially (not in parallel)
- This is not unique to Cync - ZigBee lights show similar behavior

## Logging Performance

**Modern structured logging:**
```bash
CYNC_LOG_FORMAT=both  # "json", "human", or "both"
CYNC_PERF_TRACKING=true
CYNC_PERF_THRESHOLD_MS=100  # Log operations slower than threshold
```

**Performance timing decorator:**
```python
from cync_controller.instrumentation import timed_async

@timed_async("mqtt_publish")
async def publish_message(topic, payload):
    await client.publish(topic, payload)
    # Automatically logs: "‚è±Ô∏è [mqtt_publish] completed in 45ms"
```

## Known Bottlenecks

### Cascading Refreshes (FIXED)

**Past issue:** Auto-refresh after every ACK caused cascading refresh storms.

**Fix:** Removed automatic refresh - users manually click "Refresh Device Status" when needed.

**Pattern to avoid:**
```python
# ‚ùå DON'T: Auto-refresh after ACKs
async def handle_ack():
    update_state()
    await trigger_status_refresh()  # Causes cascading refreshes!
```

### Rapid Command Throttling

**Pattern: Prevent command storms**
```python
if self.pending_command:
    logger.debug("‚è∏Ô∏è  THROTTLED: Command rejected")
    return

self.pending_command = True
logger.debug("üöÄ Command sent - awaiting confirmation")

# ... send command ...

# After ACK:
self.pending_command = False
logger.debug("‚úÖ ACK confirmed - ready for new commands")
```

## Test Performance

**Unit tests should be FAST:**
- Current suite: **< 0.4s** for 192 tests
- Target: Keep under 1 second
- Use mocks for I/O operations
- Avoid real network calls

## Cloud Relay Performance

**Trade-off:** Cloud relay mode adds latency but enables packet inspection.

**Current limitation:** Cloud relay is read-only - commands from Home Assistant don't work in relay mode.

**Recommended:** Disable cloud relay for normal operation, enable only for debugging/packet analysis.

## Related

- `common-commands.mdc` - Common development commands
- `devcontainer-quirks.mdc` - Dev environment performance notes
