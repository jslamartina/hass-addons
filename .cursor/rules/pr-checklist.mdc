---
description: PR submission checklist and guidelines
---

# Pull Request Checklist

Before submitting a PR, ensure all items are complete.

## Code Quality

- ✅ Rebuild completed successfully - `rebuild.sh` automatically runs lint/format/tests
- ✅ No manual linting needed - quality gates enforced by rebuild script
- ✅ No console.log/print statements left (use logging functions)
- ✅ Comments added for complex logic
- ✅ Type hints added for Python functions

## Security Review

- ✅ Secret scan passed - run `gitleaks detect --no-git` or check pre-commit hooks
- ✅ No sensitive data in logs (tokens, passwords, IPs if private)
- ✅ Dependency changes reviewed (if `requirements.txt` or `package.json` changed)
- ✅ Threat modeling note added (if network/auth/credential handling changed)
- ✅ Input validation added for user-supplied data

## Testing

- ✅ Tested in devcontainer
- ✅ Verified with `ha addons logs` for errors
- ✅ Fresh HA setup tested (if relevant)
- ✅ No breaking changes to existing functionality
- ✅ Test coverage added or rationale documented (if new code paths added)

## Documentation

- ✅ Updated `cync-controller/CHANGELOG.md` for user-facing changes
- ✅ Added comments for complex code sections
- ✅ Updated `docs/developer/` if implementation details changed
- ✅ Updated `docs/user/` if user-facing behavior changed

## Commits & PR

- ✅ Commits are logical and well-described
- ✅ PR title format: `[component] Brief description`
- ✅ PR description explains what and why
- ✅ No `.env` files or credentials committed
- ✅ Links to related issues (if any)

## Python-Specific

- ✅ Rebuild tested: `cd cync-controller && ./rebuild.sh` (runs lint/format/tests automatically)
- ✅ Added docstrings to new functions
- ✅ No unused imports

## Shell Script-Specific

- ✅ Scripts are idempotent (safe to run multiple times)
- ✅ Error handling implemented (set -e, || { ... })
- ✅ Logging used appropriately (log_info, log_error, etc.)
- ✅ Variables are quoted properly: `"$VAR"`
- ✅ ShellCheck warnings resolved

## Files NOT to Commit

- ❌ `hass-credentials.env` - Contains dev credentials
- ❌ Docker images or build artifacts
- ❌ Linting output files
- ❌ Temporary/debug files

## Release Preparation (master)

- ✅ Uncomment `image:` in `cync-controller/config.yaml` before releasing to `master`

## Related

- See `CONTRIBUTING.md` - Full contribution guidelines
- See `development-workflow.mdc` - Development process
