---
description: Critical credential and configuration handling
---

# Critical Credentials & Configuration

## Rule: Never Hardcode

**Never hardcode IPs, usernames, or tokens** - use config/env/discovery.

### Examples

```python
# ❌ WRONG: Hardcoded values
IP_ADDRESS = "192.168.1.100"
USERNAME = "admin"
PASSWORD = "secret"

# ✅ CORRECT: From configuration
IP_ADDRESS = os.getenv("DEVICE_IP")
USERNAME = os.getenv("HA_USERNAME")
PASSWORD = os.getenv("HA_PASSWORD")

# ✅ CORRECT: From config file
config = load_config()
device_ip = config["device_ip"]
```

## Rule: Use Environment Variables

- Load from environment variables
- Use `.env` files for local development
- Never commit credentials to repository

## Rule: Use Configuration Schema

- Define in `config.yaml`
- Validate on load
- Provide defaults where appropriate

## Files to NEVER Commit

- `hass-credentials.env` - Contains dev credentials
- `.env` files with secrets
- Hardcoded credentials in source code
- API tokens, private keys, certificates

## Secret Scanning

```bash
# Scan for secrets before commit
gitleaks detect --no-git

# Scan entire history
gitleaks detect --source . --verbose

# Pre-commit hook (recommended)
# See .pre-commit-config.yaml
```

## Response to Leaked Secrets

If secrets are committed:

1. **Revoke** the credential immediately
2. **Rewrite history:**
   ```bash
   # BFG Repo-Cleaner (fast, safe)
   bfg --delete-files hass-credentials.env
   git reflog expire --expire=now --all
   git gc --prune=now --aggressive
   ```
3. **Force push** (if safe): `git push --force`
4. **GitHub:** Enable secret scanning alerts

## Sanitize Logs Checklist

- ✅ Never log tokens, passwords, API keys
- ✅ Redact sensitive fields: `"token": "***"`
- ✅ Use allowlist for safe fields, blocklist for sensitive
- ✅ Review structured logs for leaks

**Example:**
```python
safe_fields = {"device_id", "timestamp", "level"}
sanitized = {k: v for k, v in log_data.items() if k in safe_fields}
```

## Related

See devcontainer setup in `devcontainer-quirks.mdc`.
